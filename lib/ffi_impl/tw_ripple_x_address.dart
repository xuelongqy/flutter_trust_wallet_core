// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWRippleXAddress_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWRippleXAddress_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWRippleXAddress_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Compares two addresses for equality.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Creates an address from a string representaion.
  ffi.Pointer<ffi.Int32> TWRippleXAddressCreateWithString(
    ffi.Pointer<ffi.Int32> string,
  ) {
    return _TWRippleXAddressCreateWithString(
      string,
    );
  }

  late final _TWRippleXAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressCreateWithString>>(
          'TWRippleXAddressCreateWithString');
  late final _dart_TWRippleXAddressCreateWithString
      _TWRippleXAddressCreateWithString = _TWRippleXAddressCreateWithString_ptr
          .asFunction<_dart_TWRippleXAddressCreateWithString>();

  /// Creates an address from a public key and destination tag.
  ffi.Pointer<ffi.Int32> TWRippleXAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int tag,
  ) {
    return _TWRippleXAddressCreateWithPublicKey(
      publicKey,
      tag,
    );
  }

  late final _TWRippleXAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressCreateWithPublicKey>>(
          'TWRippleXAddressCreateWithPublicKey');
  late final _dart_TWRippleXAddressCreateWithPublicKey
      _TWRippleXAddressCreateWithPublicKey =
      _TWRippleXAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWRippleXAddressCreateWithPublicKey>();

  int TWRippleXAddressDelete(
    ffi.Pointer<TWRippleXAddress> address,
  ) {
    return _TWRippleXAddressDelete(
      address,
    );
  }

  late final _TWRippleXAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressDelete>>(
          'TWRippleXAddressDelete');
  late final _dart_TWRippleXAddressDelete _TWRippleXAddressDelete =
      _TWRippleXAddressDelete_ptr.asFunction<_dart_TWRippleXAddressDelete>();

  /// Returns the address string representation.
  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  /// Returns the destination tag.
  late final ffi.Pointer<ffi.Int32> _uint32_t = _lookup<ffi.Int32>('uint32_t');

  int get uint32_t => _uint32_t.value;

  set uint32_t(int value) => _uint32_t.value = value;
}

class TWPublicKey extends ffi.Opaque {}

/// Represents a Ripple X-address.
class TWRippleXAddress extends ffi.Opaque {}

typedef _c_TWRippleXAddressCreateWithString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _dart_TWRippleXAddressCreateWithString = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _c_TWRippleXAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Int32 tag,
);

typedef _dart_TWRippleXAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int tag,
);

typedef _c_TWRippleXAddressDelete = ffi.Int32 Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _dart_TWRippleXAddressDelete = int Function(
  ffi.Pointer<TWRippleXAddress> address,
);
