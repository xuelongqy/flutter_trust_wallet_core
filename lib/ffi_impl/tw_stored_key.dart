// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWStoredKey_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWStoredKey_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWStoredKey_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Represents a key stored as an encrypted file.
  late final ffi.Pointer<ffi.Int32> _TW_EXPORT_CLASS =
      _lookup<ffi.Int32>('TW_EXPORT_CLASS');

  int get TW_EXPORT_CLASS => _TW_EXPORT_CLASS.value;

  set TW_EXPORT_CLASS(int value) => _TW_EXPORT_CLASS.value = value;

  /// Loads a key from a file.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyLoad(
    ffi.Pointer<ffi.Int32> path,
  ) {
    return _TWStoredKeyLoad(
      path,
    );
  }

  late final _TWStoredKeyLoad_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyLoad>>('TWStoredKeyLoad');
  late final _dart_TWStoredKeyLoad _TWStoredKeyLoad =
      _TWStoredKeyLoad_ptr.asFunction<_dart_TWStoredKeyLoad>();

  /// Imports a private key.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyImportPrivateKey(
    ffi.Pointer<ffi.Int32> privateKey,
    ffi.Pointer<ffi.Int32> name,
    ffi.Pointer<ffi.Int32> password,
    int coin,
  ) {
    return _TWStoredKeyImportPrivateKey(
      privateKey,
      name,
      password,
      coin,
    );
  }

  late final _TWStoredKeyImportPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportPrivateKey>>(
          'TWStoredKeyImportPrivateKey');
  late final _dart_TWStoredKeyImportPrivateKey _TWStoredKeyImportPrivateKey =
      _TWStoredKeyImportPrivateKey_ptr.asFunction<
          _dart_TWStoredKeyImportPrivateKey>();

  /// Imports an HD wallet.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyImportHDWallet(
    ffi.Pointer<ffi.Int32> mnemonic,
    ffi.Pointer<ffi.Int32> name,
    ffi.Pointer<ffi.Int32> password,
    int coin,
  ) {
    return _TWStoredKeyImportHDWallet(
      mnemonic,
      name,
      password,
      coin,
    );
  }

  late final _TWStoredKeyImportHDWallet_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportHDWallet>>(
          'TWStoredKeyImportHDWallet');
  late final _dart_TWStoredKeyImportHDWallet _TWStoredKeyImportHDWallet =
      _TWStoredKeyImportHDWallet_ptr.asFunction<
          _dart_TWStoredKeyImportHDWallet>();

  /// Imports a key from JSON.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyImportJSON(
    ffi.Pointer<ffi.Int32> json,
  ) {
    return _TWStoredKeyImportJSON(
      json,
    );
  }

  late final _TWStoredKeyImportJSON_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportJSON>>(
          'TWStoredKeyImportJSON');
  late final _dart_TWStoredKeyImportJSON _TWStoredKeyImportJSON =
      _TWStoredKeyImportJSON_ptr.asFunction<_dart_TWStoredKeyImportJSON>();

  /// Creates a new key.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyCreate(
    ffi.Pointer<ffi.Int32> name,
    ffi.Pointer<ffi.Int32> password,
  ) {
    return _TWStoredKeyCreate(
      name,
      password,
    );
  }

  late final _TWStoredKeyCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyCreate>>('TWStoredKeyCreate');
  late final _dart_TWStoredKeyCreate _TWStoredKeyCreate =
      _TWStoredKeyCreate_ptr.asFunction<_dart_TWStoredKeyCreate>();

  int TWStoredKeyDelete(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyDelete(
      key,
    );
  }

  late final _TWStoredKeyDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyDelete>>('TWStoredKeyDelete');
  late final _dart_TWStoredKeyDelete _TWStoredKeyDelete =
      _TWStoredKeyDelete_ptr.asFunction<_dart_TWStoredKeyDelete>();

  /// Stored key uniqie identifier.  Returned object needs to be deleted.
  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  /// Whether this key is a mnemonic phrase for a HD wallet.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// The number of accounts.
  late final ffi.Pointer<ffi.Int32> _size_t = _lookup<ffi.Int32>('size_t');

  int get size_t => _size_t.value;

  set size_t(int value) => _size_t.value = value;

  ffi.Pointer<ffi.Int32> TWStoredKeyAccount(
    ffi.Pointer<TWStoredKey> key,
    int index,
  ) {
    return _TWStoredKeyAccount(
      key,
      index,
    );
  }

  late final _TWStoredKeyAccount_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAccount>>('TWStoredKeyAccount');
  late final _dart_TWStoredKeyAccount _TWStoredKeyAccount =
      _TWStoredKeyAccount_ptr.asFunction<_dart_TWStoredKeyAccount>();

  /// Returns the account for a specific coin, creating it if necessary.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWStoredKeyAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWStoredKeyAccountForCoin(
      key,
      coin,
      wallet,
    );
  }

  late final _TWStoredKeyAccountForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAccountForCoin>>(
          'TWStoredKeyAccountForCoin');
  late final _dart_TWStoredKeyAccountForCoin _TWStoredKeyAccountForCoin =
      _TWStoredKeyAccountForCoin_ptr.asFunction<
          _dart_TWStoredKeyAccountForCoin>();

  /// Remove the account for a specific coin
  int TWStoredKeyRemoveAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
  ) {
    return _TWStoredKeyRemoveAccountForCoin(
      key,
      coin,
    );
  }

  late final _TWStoredKeyRemoveAccountForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyRemoveAccountForCoin>>(
          'TWStoredKeyRemoveAccountForCoin');
  late final _dart_TWStoredKeyRemoveAccountForCoin
      _TWStoredKeyRemoveAccountForCoin = _TWStoredKeyRemoveAccountForCoin_ptr
          .asFunction<_dart_TWStoredKeyRemoveAccountForCoin>();

  /// Adds a new account.
  int TWStoredKeyAddAccount(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Int32> address,
    int coin,
    ffi.Pointer<ffi.Int32> derivationPath,
    ffi.Pointer<ffi.Int32> extetndedPublicKey,
  ) {
    return _TWStoredKeyAddAccount(
      key,
      address,
      coin,
      derivationPath,
      extetndedPublicKey,
    );
  }

  late final _TWStoredKeyAddAccount_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAddAccount>>(
          'TWStoredKeyAddAccount');
  late final _dart_TWStoredKeyAddAccount _TWStoredKeyAddAccount =
      _TWStoredKeyAddAccount_ptr.asFunction<_dart_TWStoredKeyAddAccount>();

  /// Decrypts the private key.
  late final ffi.Pointer<ffi.Int32> _TWData = _lookup<ffi.Int32>('TWData');

  int get TWData => _TWData.value;

  set TWData(int value) => _TWData.value = value;

  ffi.Pointer<ffi.Int32> TWStoredKeyPrivateKey(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<ffi.Int32> password,
  ) {
    return _TWStoredKeyPrivateKey(
      key,
      coin,
      password,
    );
  }

  late final _TWStoredKeyPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyPrivateKey>>(
          'TWStoredKeyPrivateKey');
  late final _dart_TWStoredKeyPrivateKey _TWStoredKeyPrivateKey =
      _TWStoredKeyPrivateKey_ptr.asFunction<_dart_TWStoredKeyPrivateKey>();

  ffi.Pointer<ffi.Int32> TWStoredKeyWallet(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Int32> password,
  ) {
    return _TWStoredKeyWallet(
      key,
      password,
    );
  }

  late final _TWStoredKeyWallet_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyWallet>>('TWStoredKeyWallet');
  late final _dart_TWStoredKeyWallet _TWStoredKeyWallet =
      _TWStoredKeyWallet_ptr.asFunction<_dart_TWStoredKeyWallet>();
}

class TWStoredKey extends ffi.Opaque {}

/// Returns the account at a given index.  Returned object needs to be deleted.
class TWAccount extends ffi.Opaque {}

class TWHDWallet extends ffi.Opaque {}

/// Returns the private key for a specific coin.  Returned object needs to be deleted.
class TWPrivateKey extends ffi.Opaque {}

/// Dercrypts and returns the HD Wallet for mnemonic phrase keys.  Returned object needs to be deleted.
class TWHDWallet_1 extends ffi.Opaque {}

typedef _c_TWStoredKeyLoad = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> path,
);

typedef _dart_TWStoredKeyLoad = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> path,
);

typedef _c_TWStoredKeyImportPrivateKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> privateKey,
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportPrivateKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> privateKey,
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
  int coin,
);

typedef _c_TWStoredKeyImportHDWallet = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> mnemonic,
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportHDWallet = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> mnemonic,
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
  int coin,
);

typedef _c_TWStoredKeyImportJSON = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> json,
);

typedef _dart_TWStoredKeyImportJSON = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> json,
);

typedef _c_TWStoredKeyCreate = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
);

typedef _dart_TWStoredKeyCreate = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> name,
  ffi.Pointer<ffi.Int32> password,
);

typedef _c_TWStoredKeyDelete = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyDelete = int Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyAccount = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 index,
);

typedef _dart_TWStoredKeyAccount = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  int index,
);

typedef _c_TWStoredKeyAccountForCoin = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWStoredKeyAccountForCoin = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWStoredKeyRemoveAccountForCoin = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyRemoveAccountForCoin = int Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
);

typedef _c_TWStoredKeyAddAccount = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Int32> address,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Int32> derivationPath,
  ffi.Pointer<ffi.Int32> extetndedPublicKey,
);

typedef _dart_TWStoredKeyAddAccount = int Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Int32> address,
  int coin,
  ffi.Pointer<ffi.Int32> derivationPath,
  ffi.Pointer<ffi.Int32> extetndedPublicKey,
);

typedef _c_TWStoredKeyPrivateKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Int32> password,
);

typedef _dart_TWStoredKeyPrivateKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<ffi.Int32> password,
);

typedef _c_TWStoredKeyWallet = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Int32> password,
);

typedef _dart_TWStoredKeyWallet = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Int32> password,
);
