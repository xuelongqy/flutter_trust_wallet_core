// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWAnyAddress_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWAnyAddress_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWAnyAddress_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Compares two addresses for equality.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Creates an address from a string representaion.
  ffi.Pointer<ffi.Int32> TWAnyAddressCreateWithString(
    ffi.Pointer<ffi.Int32> string,
    int coin,
  ) {
    return _TWAnyAddressCreateWithString(
      string,
      coin,
    );
  }

  late final _TWAnyAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCreateWithString>>(
          'TWAnyAddressCreateWithString');
  late final _dart_TWAnyAddressCreateWithString _TWAnyAddressCreateWithString =
      _TWAnyAddressCreateWithString_ptr.asFunction<
          _dart_TWAnyAddressCreateWithString>();

  /// Creates an address from a public key.
  ffi.Pointer<ffi.Int32> TWAnyAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int coin,
  ) {
    return _TWAnyAddressCreateWithPublicKey(
      publicKey,
      coin,
    );
  }

  late final _TWAnyAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCreateWithPublicKey>>(
          'TWAnyAddressCreateWithPublicKey');
  late final _dart_TWAnyAddressCreateWithPublicKey
      _TWAnyAddressCreateWithPublicKey = _TWAnyAddressCreateWithPublicKey_ptr
          .asFunction<_dart_TWAnyAddressCreateWithPublicKey>();

  int TWAnyAddressDelete(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressDelete(
      address,
    );
  }

  late final _TWAnyAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressDelete>>('TWAnyAddressDelete');
  late final _dart_TWAnyAddressDelete _TWAnyAddressDelete =
      _TWAnyAddressDelete_ptr.asFunction<_dart_TWAnyAddressDelete>();

  /// Returns the address string representation.
  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  int TWAnyAddressCoin(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressCoin(
      address,
    );
  }

  late final _TWAnyAddressCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCoin>>('TWAnyAddressCoin');
  late final _dart_TWAnyAddressCoin _TWAnyAddressCoin =
      _TWAnyAddressCoin_ptr.asFunction<_dart_TWAnyAddressCoin>();

  /// Returns underlaying data (public key or key hash)
  late final ffi.Pointer<ffi.Int32> _TWData = _lookup<ffi.Int32>('TWData');

  int get TWData => _TWData.value;

  set TWData(int value) => _TWData.value = value;
}

class TWPublicKey extends ffi.Opaque {}

/// Represents Any blockchain address.
class TWAnyAddress extends ffi.Opaque {}

/// Returns coin type of address.
abstract class TWCoinType {}

typedef _c_TWAnyAddressCreateWithString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> string,
  ffi.Int32 coin,
);

typedef _dart_TWAnyAddressCreateWithString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> string,
  int coin,
);

typedef _c_TWAnyAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Int32 coin,
);

typedef _dart_TWAnyAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int coin,
);

typedef _c_TWAnyAddressDelete = ffi.Int32 Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressDelete = int Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _c_TWAnyAddressCoin = ffi.Int32 Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressCoin = int Function(
  ffi.Pointer<TWAnyAddress> address,
);
