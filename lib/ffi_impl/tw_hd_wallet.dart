// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWHDWallet_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWHDWallet_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWHDWallet_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _TW_EXPORT_CLASS =
      _lookup<ffi.Int32>('TW_EXPORT_CLASS');

  int get TW_EXPORT_CLASS => _TW_EXPORT_CLASS.value;

  set TW_EXPORT_CLASS(int value) => _TW_EXPORT_CLASS.value = value;

  /// Deprecated; use TWMnemonicIsValid().  Determines if a mnemonic phrase is valid.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Creates a new random HDWallet with the provided strength in bits.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWHDWalletCreate(
    int strength,
    ffi.Pointer<ffi.Int32> passphrase,
  ) {
    return _TWHDWalletCreate(
      strength,
      passphrase,
    );
  }

  late final _TWHDWalletCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreate>>('TWHDWalletCreate');
  late final _dart_TWHDWalletCreate _TWHDWalletCreate =
      _TWHDWalletCreate_ptr.asFunction<_dart_TWHDWalletCreate>();

  /// Creates an HDWallet from a mnemonic seed.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWHDWalletCreateWithMnemonic(
    ffi.Pointer<ffi.Int32> mnemonic,
    ffi.Pointer<ffi.Int32> passphrase,
  ) {
    return _TWHDWalletCreateWithMnemonic(
      mnemonic,
      passphrase,
    );
  }

  late final _TWHDWalletCreateWithMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreateWithMnemonic>>(
          'TWHDWalletCreateWithMnemonic');
  late final _dart_TWHDWalletCreateWithMnemonic _TWHDWalletCreateWithMnemonic =
      _TWHDWalletCreateWithMnemonic_ptr.asFunction<
          _dart_TWHDWalletCreateWithMnemonic>();

  /// Creates an HDWallet from a seed.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWHDWalletCreateWithData(
    ffi.Pointer<ffi.Int32> data,
    ffi.Pointer<ffi.Int32> passphrase,
  ) {
    return _TWHDWalletCreateWithData(
      data,
      passphrase,
    );
  }

  late final _TWHDWalletCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreateWithData>>(
          'TWHDWalletCreateWithData');
  late final _dart_TWHDWalletCreateWithData _TWHDWalletCreateWithData =
      _TWHDWalletCreateWithData_ptr.asFunction<
          _dart_TWHDWalletCreateWithData>();

  /// Deletes a wallet.
  int TWHDWalletDelete(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWHDWalletDelete(
      wallet,
    );
  }

  late final _TWHDWalletDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletDelete>>('TWHDWalletDelete');
  late final _dart_TWHDWalletDelete _TWHDWalletDelete =
      _TWHDWalletDelete_ptr.asFunction<_dart_TWHDWalletDelete>();

  /// Wallet seed.
  late final ffi.Pointer<ffi.Int32> _TWData = _lookup<ffi.Int32>('TWData');

  int get TWData => _TWData.value;

  set TWData(int value) => _TWData.value = value;

  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  ffi.Pointer<ffi.Int32> TWHDWalletGetMasterKey(
    ffi.Pointer<TWHDWallet> wallet,
    int curve,
  ) {
    return _TWHDWalletGetMasterKey(
      wallet,
      curve,
    );
  }

  late final _TWHDWalletGetMasterKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetMasterKey>>(
          'TWHDWalletGetMasterKey');
  late final _dart_TWHDWalletGetMasterKey _TWHDWalletGetMasterKey =
      _TWHDWalletGetMasterKey_ptr.asFunction<_dart_TWHDWalletGetMasterKey>();

  /// Generates the default private key for the specified coin.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWHDWalletGetKeyForCoin(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
  ) {
    return _TWHDWalletGetKeyForCoin(
      wallet,
      coin,
    );
  }

  late final _TWHDWalletGetKeyForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetKeyForCoin>>(
          'TWHDWalletGetKeyForCoin');
  late final _dart_TWHDWalletGetKeyForCoin _TWHDWalletGetKeyForCoin =
      _TWHDWalletGetKeyForCoin_ptr.asFunction<_dart_TWHDWalletGetKeyForCoin>();

  /// Generates the private key for the specified derivation path.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Int32> TWHDWalletGetKey(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    ffi.Pointer<ffi.Int32> derivationPath,
  ) {
    return _TWHDWalletGetKey(
      wallet,
      coin,
      derivationPath,
    );
  }

  late final _TWHDWalletGetKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetKey>>('TWHDWalletGetKey');
  late final _dart_TWHDWalletGetKey _TWHDWalletGetKey =
      _TWHDWalletGetKey_ptr.asFunction<_dart_TWHDWalletGetKey>();

  /// Shortcut method to generate private key with the specified account/change/address (bip44 standard). Returned object needs to be deleted.
  ///
  /// @see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
  ffi.Pointer<ffi.Int32> TWHDWalletGetDerivedKey(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    int account,
    int change,
    int address,
  ) {
    return _TWHDWalletGetDerivedKey(
      wallet,
      coin,
      account,
      change,
      address,
    );
  }

  late final _TWHDWalletGetDerivedKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetDerivedKey>>(
          'TWHDWalletGetDerivedKey');
  late final _dart_TWHDWalletGetDerivedKey _TWHDWalletGetDerivedKey =
      _TWHDWalletGetDerivedKey_ptr.asFunction<_dart_TWHDWalletGetDerivedKey>();

  ffi.Pointer<ffi.Int32> TWHDWalletGetPublicKeyFromExtended(
    ffi.Pointer<ffi.Int32> extended,
    int coin,
    ffi.Pointer<ffi.Int32> derivationPath,
  ) {
    return _TWHDWalletGetPublicKeyFromExtended(
      extended,
      coin,
      derivationPath,
    );
  }

  late final _TWHDWalletGetPublicKeyFromExtended_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetPublicKeyFromExtended>>(
          'TWHDWalletGetPublicKeyFromExtended');
  late final _dart_TWHDWalletGetPublicKeyFromExtended
      _TWHDWalletGetPublicKeyFromExtended =
      _TWHDWalletGetPublicKeyFromExtended_ptr.asFunction<
          _dart_TWHDWalletGetPublicKeyFromExtended>();
}

class TWHDWallet extends ffi.Opaque {}

/// Returns master key.  Returned object needs to be deleted.
class TWPrivateKey extends ffi.Opaque {}

/// Computes the public key from an exteded public key representation.  Returned object needs to be deleted.
class TWPublicKey extends ffi.Opaque {}

typedef _c_TWHDWalletCreate = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 strength,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _dart_TWHDWalletCreate = ffi.Pointer<ffi.Int32> Function(
  int strength,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _c_TWHDWalletCreateWithMnemonic = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> mnemonic,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _dart_TWHDWalletCreateWithMnemonic = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> mnemonic,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _c_TWHDWalletCreateWithData = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> data,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _dart_TWHDWalletCreateWithData = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> data,
  ffi.Pointer<ffi.Int32> passphrase,
);

typedef _c_TWHDWalletDelete = ffi.Int32 Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletDelete = int Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletGetMasterKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 curve,
);

typedef _dart_TWHDWalletGetMasterKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int curve,
);

typedef _c_TWHDWalletGetKeyForCoin = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
);

typedef _dart_TWHDWalletGetKeyForCoin = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
);

typedef _c_TWHDWalletGetKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Int32> derivationPath,
);

typedef _dart_TWHDWalletGetKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  ffi.Pointer<ffi.Int32> derivationPath,
);

typedef _c_TWHDWalletGetDerivedKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Int32 account,
  ffi.Int32 change,
  ffi.Int32 address,
);

typedef _dart_TWHDWalletGetDerivedKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  int account,
  int change,
  int address,
);

typedef _c_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> extended,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Int32> derivationPath,
);

typedef _dart_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<ffi.Int32> extended,
  int coin,
  ffi.Pointer<ffi.Int32> derivationPath,
);
