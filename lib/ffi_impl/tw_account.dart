// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWAccount_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWAccount_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWAccount_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Account for a particular coin within a wallet.
  late final ffi.Pointer<ffi.Int32> _TW_EXPORT_CLASS =
      _lookup<ffi.Int32>('TW_EXPORT_CLASS');

  int get TW_EXPORT_CLASS => _TW_EXPORT_CLASS.value;

  set TW_EXPORT_CLASS(int value) => _TW_EXPORT_CLASS.value = value;

  ffi.Pointer<ffi.Int32> TWAccountCreate(
    ffi.Pointer<ffi.Int32> address,
    int coin,
    ffi.Pointer<ffi.Int32> derivationPath,
    ffi.Pointer<ffi.Int32> extendedPublicKey,
  ) {
    return _TWAccountCreate(
      address,
      coin,
      derivationPath,
      extendedPublicKey,
    );
  }

  late final _TWAccountCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountCreate>>('TWAccountCreate');
  late final _dart_TWAccountCreate _TWAccountCreate =
      _TWAccountCreate_ptr.asFunction<_dart_TWAccountCreate>();

  int TWAccountDelete(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountDelete(
      account,
    );
  }

  late final _TWAccountDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountDelete>>('TWAccountDelete');
  late final _dart_TWAccountDelete _TWAccountDelete =
      _TWAccountDelete_ptr.asFunction<_dart_TWAccountDelete>();

  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  int TWAccountCoin(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountCoin(
      account,
    );
  }

  late final _TWAccountCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountCoin>>('TWAccountCoin');
  late final _dart_TWAccountCoin _TWAccountCoin =
      _TWAccountCoin_ptr.asFunction<_dart_TWAccountCoin>();
}

class TWAccount extends ffi.Opaque {}

abstract class TWCoinType {}

typedef _c_TWAccountCreate = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> address,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Int32> derivationPath,
  ffi.Pointer<ffi.Int32> extendedPublicKey,
);

typedef _dart_TWAccountCreate = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> address,
  int coin,
  ffi.Pointer<ffi.Int32> derivationPath,
  ffi.Pointer<ffi.Int32> extendedPublicKey,
);

typedef _c_TWAccountDelete = ffi.Int32 Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountDelete = int Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWAccountCoin = ffi.Int32 Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountCoin = int Function(
  ffi.Pointer<TWAccount> account,
);
