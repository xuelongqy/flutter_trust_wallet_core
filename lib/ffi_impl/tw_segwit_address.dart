// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWSegwitAddress_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWSegwitAddress_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWSegwitAddress_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Compares two addresses for equality.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Creates an address from a string representaion.
  ffi.Pointer<ffi.Int32> TWSegwitAddressCreateWithString(
    ffi.Pointer<ffi.Int32> string,
  ) {
    return _TWSegwitAddressCreateWithString(
      string,
    );
  }

  late final _TWSegwitAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressCreateWithString>>(
          'TWSegwitAddressCreateWithString');
  late final _dart_TWSegwitAddressCreateWithString
      _TWSegwitAddressCreateWithString = _TWSegwitAddressCreateWithString_ptr
          .asFunction<_dart_TWSegwitAddressCreateWithString>();

  /// Creates an address from a public key.
  ffi.Pointer<ffi.Int32> TWSegwitAddressCreateWithPublicKey(
    int hrp,
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWSegwitAddressCreateWithPublicKey(
      hrp,
      publicKey,
    );
  }

  late final _TWSegwitAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressCreateWithPublicKey>>(
          'TWSegwitAddressCreateWithPublicKey');
  late final _dart_TWSegwitAddressCreateWithPublicKey
      _TWSegwitAddressCreateWithPublicKey =
      _TWSegwitAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWSegwitAddressCreateWithPublicKey>();

  int TWSegwitAddressDelete(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressDelete(
      address,
    );
  }

  late final _TWSegwitAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressDelete>>(
          'TWSegwitAddressDelete');
  late final _dart_TWSegwitAddressDelete _TWSegwitAddressDelete =
      _TWSegwitAddressDelete_ptr.asFunction<_dart_TWSegwitAddressDelete>();

  /// Returns the address string representation.
  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  int TWSegwitAddressHRP(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressHRP(
      address,
    );
  }

  late final _TWSegwitAddressHRP_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressHRP>>('TWSegwitAddressHRP');
  late final _dart_TWSegwitAddressHRP _TWSegwitAddressHRP =
      _TWSegwitAddressHRP_ptr.asFunction<_dart_TWSegwitAddressHRP>();

  /// Returns the witness program
  late final ffi.Pointer<ffi.Int32> _TWData = _lookup<ffi.Int32>('TWData');

  int get TWData => _TWData.value;

  set TWData(int value) => _TWData.value = value;
}

class TWPublicKey extends ffi.Opaque {}

/// Represents a BIP 0173 address.
class TWSegwitAddress extends ffi.Opaque {}

/// Returns the human-readable part.
abstract class TWHRP {}

typedef _c_TWSegwitAddressCreateWithString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _dart_TWSegwitAddressCreateWithString = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _c_TWSegwitAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 hrp,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWSegwitAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32>
    Function(
  int hrp,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWSegwitAddressDelete = ffi.Int32 Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressDelete = int Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWSegwitAddressHRP = ffi.Int32 Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressHRP = int Function(
  ffi.Pointer<TWSegwitAddress> address,
);
