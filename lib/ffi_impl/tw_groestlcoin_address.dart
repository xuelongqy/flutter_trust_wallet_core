// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWGroestlcoinAddress_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWGroestlcoinAddress_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWGroestlcoinAddress_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Compares two addresses for equality.
  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  /// Create an address from a base58 sring representaion.
  ffi.Pointer<ffi.Int32> TWGroestlcoinAddressCreateWithString(
    ffi.Pointer<ffi.Int32> string,
  ) {
    return _TWGroestlcoinAddressCreateWithString(
      string,
    );
  }

  late final _TWGroestlcoinAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressCreateWithString>>(
          'TWGroestlcoinAddressCreateWithString');
  late final _dart_TWGroestlcoinAddressCreateWithString
      _TWGroestlcoinAddressCreateWithString =
      _TWGroestlcoinAddressCreateWithString_ptr.asFunction<
          _dart_TWGroestlcoinAddressCreateWithString>();

  /// Create an address from a public key and a prefix byte.
  ffi.Pointer<ffi.Int32> TWGroestlcoinAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int prefix,
  ) {
    return _TWGroestlcoinAddressCreateWithPublicKey(
      publicKey,
      prefix,
    );
  }

  late final _TWGroestlcoinAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressCreateWithPublicKey>>(
          'TWGroestlcoinAddressCreateWithPublicKey');
  late final _dart_TWGroestlcoinAddressCreateWithPublicKey
      _TWGroestlcoinAddressCreateWithPublicKey =
      _TWGroestlcoinAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWGroestlcoinAddressCreateWithPublicKey>();

  int TWGroestlcoinAddressDelete(
    ffi.Pointer<TWGroestlcoinAddress> address,
  ) {
    return _TWGroestlcoinAddressDelete(
      address,
    );
  }

  late final _TWGroestlcoinAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressDelete>>(
          'TWGroestlcoinAddressDelete');
  late final _dart_TWGroestlcoinAddressDelete _TWGroestlcoinAddressDelete =
      _TWGroestlcoinAddressDelete_ptr.asFunction<
          _dart_TWGroestlcoinAddressDelete>();

  /// Returns the address base58 string representation.
  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;
}

class TWPublicKey extends ffi.Opaque {}

/// Represents a legacy Groestlcoin address.
class TWGroestlcoinAddress extends ffi.Opaque {}

typedef _c_TWGroestlcoinAddressCreateWithString = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _dart_TWGroestlcoinAddressCreateWithString = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<ffi.Int32> string,
);

typedef _c_TWGroestlcoinAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Int32 prefix,
);

typedef _dart_TWGroestlcoinAddressCreateWithPublicKey = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int prefix,
);

typedef _c_TWGroestlcoinAddressDelete = ffi.Int32 Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);

typedef _dart_TWGroestlcoinAddressDelete = int Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);
