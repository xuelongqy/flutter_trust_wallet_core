// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// trust wallet core
class TWPublicKey_1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TWPublicKey_1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TWPublicKey_1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _size_t = _lookup<ffi.Int32>('size_t');

  int get size_t => _size_t.value;

  set size_t(int value) => _size_t.value = value;

  late final ffi.Pointer<ffi.Int32> _TWPublicKeyUncompressedSize =
      _lookup<ffi.Int32>('TWPublicKeyUncompressedSize');

  int get TWPublicKeyUncompressedSize => _TWPublicKeyUncompressedSize.value;

  set TWPublicKeyUncompressedSize(int value) =>
      _TWPublicKeyUncompressedSize.value = value;

  ffi.Pointer<ffi.Int32> TWPublicKeyCreateWithData(
    ffi.Pointer<ffi.Int32> data,
    int type,
  ) {
    return _TWPublicKeyCreateWithData(
      data,
      type,
    );
  }

  late final _TWPublicKeyCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyCreateWithData>>(
          'TWPublicKeyCreateWithData');
  late final _dart_TWPublicKeyCreateWithData _TWPublicKeyCreateWithData =
      _TWPublicKeyCreateWithData_ptr.asFunction<
          _dart_TWPublicKeyCreateWithData>();

  int TWPublicKeyDelete(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    return _TWPublicKeyDelete(
      pk,
    );
  }

  late final _TWPublicKeyDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyDelete>>('TWPublicKeyDelete');
  late final _dart_TWPublicKeyDelete _TWPublicKeyDelete =
      _TWPublicKeyDelete_ptr.asFunction<_dart_TWPublicKeyDelete>();

  late final ffi.Pointer<ffi.Int32> _bool = _lookup<ffi.Int32>('bool');

  int get bool => _bool.value;

  set bool(int value) => _bool.value = value;

  ffi.Pointer<ffi.Int32> TWPublicKeyCompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    return _TWPublicKeyCompressed(
      from,
    );
  }

  late final _TWPublicKeyCompressed_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyCompressed>>(
          'TWPublicKeyCompressed');
  late final _dart_TWPublicKeyCompressed _TWPublicKeyCompressed =
      _TWPublicKeyCompressed_ptr.asFunction<_dart_TWPublicKeyCompressed>();

  ffi.Pointer<ffi.Int32> TWPublicKeyUncompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    return _TWPublicKeyUncompressed(
      from,
    );
  }

  late final _TWPublicKeyUncompressed_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyUncompressed>>(
          'TWPublicKeyUncompressed');
  late final _dart_TWPublicKeyUncompressed _TWPublicKeyUncompressed =
      _TWPublicKeyUncompressed_ptr.asFunction<_dart_TWPublicKeyUncompressed>();

  late final ffi.Pointer<ffi.Int32> _TWData = _lookup<ffi.Int32>('TWData');

  int get TWData => _TWData.value;

  set TWData(int value) => _TWData.value = value;

  int TWPublicKeyKeyType(
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWPublicKeyKeyType(
      publicKey,
    );
  }

  late final _TWPublicKeyKeyType_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyKeyType>>('TWPublicKeyKeyType');
  late final _dart_TWPublicKeyKeyType _TWPublicKeyKeyType =
      _TWPublicKeyKeyType_ptr.asFunction<_dart_TWPublicKeyKeyType>();

  late final ffi.Pointer<ffi.Int32> _TWString = _lookup<ffi.Int32>('TWString');

  int get TWString => _TWString.value;

  set TWString(int value) => _TWString.value = value;

  ffi.Pointer<ffi.Int32> TWPublicKeyRecover(
    ffi.Pointer<ffi.Int32> signature,
    ffi.Pointer<ffi.Int32> message,
  ) {
    return _TWPublicKeyRecover(
      signature,
      message,
    );
  }

  late final _TWPublicKeyRecover_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyRecover>>('TWPublicKeyRecover');
  late final _dart_TWPublicKeyRecover _TWPublicKeyRecover =
      _TWPublicKeyRecover_ptr.asFunction<_dart_TWPublicKeyRecover>();
}

class TWPublicKey extends ffi.Opaque {}

abstract class TWPublicKeyType {}

typedef _c_TWPublicKeyCreateWithData = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> data,
  ffi.Int32 type,
);

typedef _dart_TWPublicKeyCreateWithData = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> data,
  int type,
);

typedef _c_TWPublicKeyDelete = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyDelete = int Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyCompressed = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyCompressed = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyUncompressed = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyUncompressed = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyKeyType = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWPublicKeyKeyType = int Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWPublicKeyRecover = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> signature,
  ffi.Pointer<ffi.Int32> message,
);

typedef _dart_TWPublicKeyRecover = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> signature,
  ffi.Pointer<ffi.Int32> message,
);
